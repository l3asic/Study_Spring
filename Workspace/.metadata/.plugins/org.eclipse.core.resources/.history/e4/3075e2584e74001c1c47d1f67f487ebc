package com.hanul.iot;

import java.util.HashMap;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import common.CommonService;
import member.MemberServiceImpl;
import member.MemberVO;
import notice.NoticeServiceImpl;
import notice.NoticeVO;

@Controller
public class NoticeController {

	@Autowired private NoticeServiceImpl service;
	@Autowired private MemberServiceImpl member;
	@Autowired private CommonService common;
	
	
	@RequestMapping ("/download.no")
	public void download(int id) {
		
	}
	
	
	
	// 공지사항 상세화면 요청
	@RequestMapping ("detail.no")
	public String detail (int id, Model model) {
		// 상세화면 요청 전 조회수 증가
		service.notice_read(id);
		
		// 선택한 공지사항의 정보를 DB에서 조회해와 상세화면 출력
		model.addAttribute("vo",service.notice_detail(id));		
		model.addAttribute("crlf", "\r\n");
		return "notice/detail";
		
		
	}
	
	
	
	// 신규 공지사항 저장처리 요청
	@RequestMapping("/insert.no")
	public String insert(NoticeVO vo, MultipartFile file
			, HttpSession session) {
//		MemberVO member = (MemberVO)session.getAttribute("loginInfo");
//		vo.setWriter(member.getId());
		// 로그인 된 사용자의 id를 가져와 작성자(writer)가 됨.
		vo.setWriter( ((MemberVO) session.getAttribute("loginInfo")).getId() );
		
		if (! file.isEmpty() ) { // 파일이 있는 경우
			// 첨부 파일 처리 (DB 에 저장)
			vo.setFilename( file.getOriginalFilename() );
			// 전달받은 파일의 실제 이름을 vo에 할당
			
			vo.setFilepath( common.fileupload("notice", file, session) );
		}
		
		// 화면에서 입력한 정보를 DB에 저장한 후 화면으로 연결
		
		service.notice_insert(vo);
		return "redirect:list.no";
	}
	
	// 신규 공지사항 입력화면 요청
	@RequestMapping("/new.no")
	public String notice() {
		return "notice/new";
	}
	
	// 공지사항 글목록 화면 요청
	@RequestMapping("/list.no")
	public String list(HttpSession session, Model model) {
		// 공지글 처리 중 로그인... 나중에 삭제
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("id", "admin");
		map.put("pw", "admin");
		session.setAttribute("loginInfo", member.member_login(map)) ;
		
		session.setAttribute("category", "no");
		// DB에서 공지글 목록을 조회해와 목록화면에 출력
		model.addAttribute("list", service.notice_list());
		return "notice/list";
	}
}



