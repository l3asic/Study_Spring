<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="notice.mapper">
	
	<!-- 공지글에 대한 신규 답글 등록 -->
	<insert id="reply_insert">
	<!-- root : 원 글의 id를 root 로 그대로 담는다.
	     step : 동일한 root 를 갖는 글에 대해 원글의 step 보다 더 큰 step 을 가진 경우
	            step +1 로 변경한 후 원글의 step+1 로 저장한다.
	     indent : 원글의 indent +1     -->
	     
	<!-- step : 동일한 root 를 갖는 글에 대해 원글의 step 보다 더 큰 step 을 가진 경우
	            step +1 로 변경 -->
	<!-- 오라클의 경우 여러 쿼리문을 작성할 경우 명령행을 구분하기 위하여 ; 을 붙임 -->
	<!-- 오라클은 myBatis에서 여러 행의 처리를 기본 지원하지 않음. 그래서 프로그램을 작성해야 함 -->
	
	<!-- 쿼리문에 < > 등 부등호 기호를 태그 형태로 인식을 하기 때문에 이를 방지하기 위하여
	 CDATA 처리를 함.  -->
	 <!-- 프로그램 선언한 부분을 중괄호로 묶어서 프로그램 부를 지정 -->
	 	<!-- 익명의 프로그램을 호출하는데 선언만 함. declare 는 java에서 클래스명에 해당 -->
	 				<!-- 실행부 (begin ~ end)   java에서 {  } 에 해당 -->
	   
		{ 
			call declare
			begin
			    update notice set step = step+1 where root = #{root} and  step <![CDATA[ > ]]> #{step};
			            
				insert into notice (id, title, content, writer, 
							filename, filepath, root, step, indent)
				values (seq_notice.nextval, #{title}, #{content}, #{writer}
						, #{filename, jdbcType=VARCHAR}, #{filepath, jdbcType=VARCHAR}
						, #{root}, #{step}+1, #{indent}+1);
			end
		}

	</insert>
	
	
	<!-- 공지 게시글 내용 수정 -->
	<update id="update">
		update notice set title=#{title}, content=#{content}
				, filename = #{filename, jdbcType=VARCHAR}
				, filepath = #{filepath, jdbcType=VARCHAR}
		where id = #{id}		
	</update>
	
	<!-- 해당 ID의 공지글 삭제 -->
	<delete id="delete">
		delete from notice
		where id = #{id}	
	</delete>
	
	<!-- 상세화면 조회 전 조회수 증가(변경) -->
	<update id="read">
		update notice set readcnt = readcnt + 1
		where id = #{id}
	</update>
	
	<!-- 공지글 상세 내용 조회 -->
	<select id="detail" resultType="notice.NoticeVO">
		select n.*, (select name from member where id = n.writer) name 
		from notice n
		where id = #{id}
	
	</select>
	
	<!-- 공지사항 신규 글 등록 -->
	<insert id="insert">
		insert into notice (id, root, title, content, writer, filename, filepath)
		values ( seq_notice.nextval, seq_notice.currval,#{title}, #{content}, #{writer}, 
		#{filename, jdbcType=VARCHAR}, #{filepath, jdbcType=VARCHAR} )
	</insert>
	
<!-- myBatis에서 sql 구문을 작성하여 include 기능을 이용하여 활용
	이때 id 를 참조하여 반복되는 쿼리를 재활용 할 수 있게 함 -->	
	<sql id="where_search">
		<!-- 제목에 '테스트' 문자가 있는 것을 조회한다면 where title like '테스트' -->
		<if test="search == 'title' or search == 'content'">
			where ${search} like '%'||#{keyword}||'%'		
		</if>
		<!-- 작성자에 '자' 문자가 있는 것을 조회한다면 member 테이블에서 like를 활용해
		name 에 '자'를 포함한 글자를 찾을 수 있도록 함. -->
		<if test="search == 'writer'">
			where writer in (select id from member where name like '%'||#{keyword}||'%' )		
		</if>
	
		<if test="search == 'all' ">
			where title like '%'||#{keyword}||'%'
			or content like '%'||#{keyword}||'%'
			or writer in (select id from member where name like '%'||#{keyword}||'%' )
		</if>
	</sql>
	
	<!-- 전체 공지글 수 조회 -->
	<select id="totalList" resultType="integer">
		select count(*) from notice	<include refid="where_search" />
	</select>
	
	<!-- 페이지 처리된 글 목록 조회 -->
	<select id="list" resultType="notice.NoticeVO">
		select *		
		from ( select rownum no, n.*, (select name from member where id = n.writer) name
				from (select * from notice <include refid="where_search" /> 
						order by root, step desc) n
						order by no desc )
		where no between #{beginList} and #{endList}
	</select>
	
	
	<!-- 공지사항 전체 글 목록 조회 -->
<!-- 	<select id="list" resultType="notice.NoticeVO"> -->
 		<!-- select * from notice -->
<!-- 		select rownum no, n.*, (select name from member -->
<!-- 						where id = n.writer ) name  -->
<!-- 		from (select * from notice order by id) n -->
<!-- 		order by no desc -->
<!-- 	</select> -->
</mapper>